services:
  nginx:
    image: nginx:alpine
    container_name: gateway_container_syp
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - utilisateurs
      - images
      - frontend
      - publications
      - timeline
      - challenges

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    restart: unless-stopped
    container_name: keycloak_container_syp
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_EVENTS_LISTENERS: "shot_your_pet_event_listener,email"
      JAVA_OPTS_APPEND: "-Drabbitmq.host=${RABBITMQ_HOST} -Drabbitmq.port=${RABBITMQ_PORT} -Drabbitmq.username=${RABBITMQ_USERNAME} -Drabbitmq.password=${RABBITMQ_PASSWORD}"
      # KC_DB: mariadb
      # KC_DB_URL: jdbc:mariadb://keycloak-bd:3306/keycloak
      # KC_DB_USERNAME: admin
      # KC_DB_PASSWORD: admin
    ports:
      - "9001:8080"
    volumes:
      - "./SPI_Keycloak.jar:/opt/keycloak/providers/syp-event-listener.jar"
      - "./realm-syp.json:/opt/keycloak/data/import/realm-export.json"
    command: start-dev --import-realm
    depends_on:
      - rabbitmq

  utilisateurs:
    image: ghcr.io/shot-your-pet/utilisateur-groupe9/${UTILISATEUR_IMAGE}
    container_name: utilisateurs_container_syp
    restart: unless-stopped
    pull_policy: always
    environment:
      DB_DB: ${DB_DB}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: mariadb_utilisateurs
      DB_PORT: 3306
      REALM_KEYCLOAK_URL: ${REALM_KEYCLOAK_URL}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      ALLOWED_CORS: ${ALLOWED_CORS}
      LOG_LEVEL: TRACE
    depends_on:
      rabbitmq:
        condition: service_started
      mariadb_utilisateurs:
        condition: service_healthy

  images:
    image: ghcr.io/shot-your-pet/images-groupe9/${IMAGES_IMAGE}
    container_name: images_container_syp
    restart: unless-stopped
    volumes:
      - ./images:/app/images
    environment:
      MONGO_BD: ${MONGO_BD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      IMAGE_PATH: ${IMAGE_PATH}
      REALM_KEYCLOAK_URL: ${REALM_KEYCLOAK_URL}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      ALLOWED_CORS: ${ALLOWED_CORS}
    depends_on:
      rabbitmq:
        condition: service_started
      mongodb_images:
        condition: service_started
      keycloak:
        condition: service_started

  frontend:
    image: ghcr.io/shot-your-pet/frontend-groupe9/${FRONTEND_IMAGE}
    container_name: frontend_container_syp
    restart: unless-stopped
    pull_policy: always
    environment:
      API_URL: ${API_URL}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}

  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbitmq_container_syp
    restart: unless-stopped
    ports:
      - "15672:15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: "secret_cookie"

  mongodb_images:
    image: mongo:8.0.5
    container_name: mongodb-image_container_syp
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}

  mariadb_utilisateurs:
    image: mariadb:11.0.2
    container_name: utilisateur_db_container_syp
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DB}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: mariadb-admin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      timeout: 10s
      start_period: 5s
      retries: 10

  publications:
    image: ghcr.io/shot-your-pet/publications:${PUBLICATION_IMAGE}
    pull_policy: always
    container_name: publications_container_syp
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_started
      mongodb_publications:
        condition: service_healthy
    environment:
      MONGODB_HOST: mongodb_publications
      MONGODB_USERNAME: ${PUBLICATIONS_MONGODB_USERNAME}
      MONGODB_PASSWORD: ${PUBLICATIONS_MONGODB_PASSWORD}
      REALM_KEYCLOAK_URL: ${REALM_KEYCLOAK_URL}
      RABBIT_MQ_ADDRESS: amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}/

  mongodb_publications:
    image: mongo:8.0.5
    container_name: mongodb-publications_container_syp
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${PUBLICATIONS_MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${PUBLICATIONS_MONGODB_PASSWORD}
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", '"db.adminCommand(''ping'')"' ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  mariadb_challenges:
    image: mariadb:11.0.2
    container_name: challenges-db_container_syp
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: "challenges"
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: mariadb-admin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      timeout: 10s
      start_period: 5s
      retries: 10

  challenges:
    image: ghcr.io/shot-your-pet/challenges-goupe9/${CHALLENGES_IMAGE}
    container_name: challenges_container_syp
    restart: unless-stopped
    environment:
      DB_DB: "challenges"
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: mariadb_challenges
      DB_PORT: 3306
      REALM_KEYCLOAK_URL: ${REALM_KEYCLOAK_URL}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      ALLOWED_CORS: ${ALLOWED_CORS}
      CHALLENGE_CRON: ${CHALLENGE_CRON}
      LOG_LEVEL: TRACE
    depends_on:
      - rabbitmq
      - mariadb_challenges
      - keycloak

  timeline:
    image: ghcr.io/shot-your-pet/timeline:${TIMELINE_IMAGE:-main}
    pull_policy: always
    container_name: timeline_container_syp
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_started
      postgres_timeline:
        condition: service_healthy
      utilisateurs:
        condition: service_started
    environment:
      ConnectionStrings__ShotYourPet: Host=postgres_timeline;Database=${TIMELINE_DB_TABLE:-timeline};Password=${TIMELINE_DB_PASSWORD:-postgres};Username=${TIMELINE_DB_USER:-postgres}
      ConnectionStrings__RabbitMQ: amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}/

  postgres_timeline:
    image: postgres
    restart: unless-stopped
    container_name: timeline-db_container_syp
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${TIMELINE_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${TIMELINE_DB_PASSWORD:-postgres}
      POSTGRES_DB: ${TIMELINE_DB_TABLE:-timeline}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  notifications:
    image: ghcr.io/shot-your-pet/notifications-groupe9/${NOTIFICATIONS_IMAGE}
    container_name: notifications_container_syp
    restart: unless-stopped
    ports:
      - "8087:8080"
    environment:
      POSTGRES_DB: "notifications"
      POSTGRES_HOST: postgres_notifications
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      REALM_KEYCLOAK_URL: ${REALM_KEYCLOAK_URL}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      ALLOWED_CORS: ${ALLOWED_CORS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_EMAIL: ${SMTP_EMAIL}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
    depends_on:
      rabbitmq:
        condition: service_started
      mongodb_images:
        condition: service_started
      keycloak:
        condition: service_started

  postgres_notifications:
    image: postgres
    restart: unless-stopped
    container_name: notifications-db_container_syp
    ports:
      - "5432:5432"
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: "notifications"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:3.0.0
    container_name: loki_container_syp
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/mnt/config/loki-config.yaml
    command: -config.file=/mnt/config/loki-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.0.0
    container_name: promtail_container_syp
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/mnt/config/promtail-config.yml
    command: -config.file=/mnt/config/promtail-config.yml
    restart: unless-stopped
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_container_syp
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_container_syp
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}  # DÃ©finir le mot de passe admin
    restart: unless-stopped

